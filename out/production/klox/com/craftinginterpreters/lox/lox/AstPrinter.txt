package com.craftinginterpreters.lox


internal class AstPrinter : Expr.Visitor<String?> {
    fun print(expr: Expr): String {
        return expr.accept(this)
    }

    fun visitBinaryExpr(expr: Binary): String? {
        return parenthesize(
            expr.operator.lexeme,
            expr.left, expr.right
        )
    }

    fun visitGroupingExpr(expr: Grouping): String? {
        return parenthesize("group", expr.expression)
    }

    fun visitLiteralExpr(expr: Literal): String? {
        return if (expr.value == null) "nil" else expr.value.toString()
    }

    fun visitUnaryExpr(expr: Unary): String? {
        return parenthesize(expr.operator.lexeme, expr.right)
    }

    private fun parenthesize(name: String, vararg exprs: Expr): String? {
        val builder = StringBuilder()
        builder.append("(").append(name)
        for (expr in exprs) {
            builder.append(" ")
            builder.append(expr.accept(this))
        }
        builder.append(")")
        return builder.toString()
    }

}

fun main(args: Array<String>) {
    val expression: Expr = Binary(
        Unary(
            Token(TokenType.MINUS, "-", null, 1),
            Literal(123)
        ),
        Token(TokenType.STAR, "*", null, 1),
        Grouping(
            Literal(45.67)
        )
    )

    println(AstPrinter().print(expression))
}